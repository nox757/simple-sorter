swagger: "2.0"
info:
  version: "1.0.0"
  title: "Chibisov cities API"
host: "example.com"
basePath: "/v1"
schemes:
- "https"
- "http"
paths:
  /cities:
    get:
      tags:
      - "city"
      summary: "Get all cities (may be parametrs)"
      description: "Maybe filter by specific regionId"
      operationId: "getAllCities"
      produces:

      - "application/json"
      parameters:
        - name: "regionId"
          in: "query"
          description: "ID of region that owned cities"
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/City"
        404:
          description: "Not found"
    post:
      tags:
        - "city"
      summary: "Create new city"
      description: ""
      operationId: "createCity"
      consumes:
      - "application/json"
      produces:

      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "City object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/City"
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/City"
        400:
          description: "Invalid ID supplied"
  /cities/{cityId}:
    get:
      tags:
      - "city"
      summary: "Find city by ID"
      description: "Returns a single city"
      operationId: "getCityById"
      produces:

      - "application/json"
      parameters:
      - name: "cityId"
        in: "path"
        description: "ID of city to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/City"
        400:
          description: "Invalid ID supplied"
        404:
          description: "City not found"
    put:
      tags:
      - "city"
      summary: "Updates existsing city"
      description: ""
      operationId: "updateCity"
      consumes:
      - "application/json"
      produces:

      - "application/json"
      parameters:
      - name: "cityId"
        in: "path"
        description: "ID of city that needs to be update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "City object that needs to be update"
        required: true
        schema:
          $ref: "#/definitions/City"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/City/properties/id"
        409:
          description: "Invalid input"
    delete:
      tags:
      - "city"
      summary: "Deletes a city"
      description: ""
      operationId: "deleteCity"
      produces:

      - "application/json"
      parameters:
      - name: "cityId"
        in: "path"
        description: "City id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
       204:
          description: "successful operation"
       404:
          description: "City not found"
  /cities/{cityId}/attributes:
    get:
      tags:
      - "city"
      summary: "Get all attributes of city"
      operationId: "getAttributesCity"
      produces:
      - "application/json"
      parameters:
        - name: "cityId"
          in: "path"
          description: "City id"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Attribute"
        404:
          description: "Not found"
  /cities/{cityId}/attributes/{attributeId}:
    put:
      tags:
        - "city"
      summary: "Add attribute to city"
      description: ""
      operationId: "addAttributetoCity"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - name: "cityId"
          in: "path"
          description: "City id"
          required: true
          type: "integer"
          format: "int64"
        - in: "path"
          name: "attributeId"
          description: "Attribute id"
          required: true
          type: "integer"
          format: "int64"
      responses:
        204:
          description: "successful operation"
        400:
          description: "Invalid ID supplied"

  /regions:
    get:
      tags:
      - "region"
      summary: "Get all regions (may be parametrs)"
      operationId: "getAllRegions"
      produces:

      - "application/json"
      parameters:
        - name: "countryId"
          in: "query"
          description: "ID of country that owned regions"
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Region"
        404:
          description: "Not found"
    post:
      tags:
        - "region"
      summary: "Create new region"
      description: ""
      operationId: "createRegion"
      consumes:
      - "application/json"
      produces:

      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Region object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Region"
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Region"
        400:
          description: "Invalid ID supplied"
  /regions/{regionId}:
    get:
      tags:
      - "region"
      summary: "Find region by ID"
      description: "Returns a single region"
      operationId: "getRegionById"
      produces:

      - "application/json"
      parameters:
      - name: "regionId"
        in: "path"
        description: "ID of region to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Region"
        404:
          description: "Region not found"
    put:
      tags:
      - "region"
      summary: "Updates existsing region"
      description: ""
      operationId: "updateRegion"
      consumes:
      - "application/json"
      produces:

      - "application/json"
      parameters:
      - name: "regionId"
        in: "path"
        description: "ID of region that needs to be update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Region object that needs to be update"
        required: true
        schema:
          $ref: "#/definitions/Region"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Region/properties/id"
        409:
          description: "Invalid input"
    delete:
      tags:
      - "region"
      summary: "Deletes a region"
      description: ""
      operationId: "deleteRegion"
      produces:

      - "application/json"
      parameters:
      - name: "regionId"
        in: "path"
        description: "Region id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
       204:
          description: "successful operation"
       404:
          description: "Region not found"

  /countries:
    get:
      tags:
      - "country"
      summary: "Get all countries"
      operationId: "getAllcountries"
      produces:

      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Country"
        404:
          description: "Not found"
    post:
      tags:
        - "country"
      summary: "Create new country"
      description: ""
      operationId: "createCountry"
      consumes:
      - "application/json"
      produces:

      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Country object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Country"
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Country"
        400:
          description: "Invalid ID supplied"
  /countries/{countryId}:
    get:
      tags:
      - "country"
      summary: "Find country by ID"
      description: "Returns a single region"
      operationId: "getCountryById"
      produces:

      - "application/json"
      parameters:
      - name: "countryId"
        in: "path"
        description: "ID of country to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Country"
        404:
          description: "Country not found"
    put:
      tags:
      - "country"
      summary: "Updates existsing country"
      description: ""
      operationId: "updateCountry"
      consumes:
      - "application/json"
      produces:

      - "application/json"
      parameters:
      - name: "countryId"
        in: "path"
        description: "ID of country that needs to be update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Country object that needs to be update"
        required: true
        schema:
          $ref: "#/definitions/Country"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Country/properties/id"
        409:
          description: "Invalid input"
    delete:
      tags:
      - "country"
      summary: "Deletes a country"
      description: ""
      operationId: "deleteCountry"
      produces:

      - "application/json"
      parameters:
      - name: "countryId"
        in: "path"
        description: "Country id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
       204:
          description: "successful operation"
       404:
          description: "Country not found"
  /mayors:
    get:
      tags:
      - "mayor"
      summary: "Get all mayors"
      operationId: "getAllMayors"
      produces:

      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Mayor"
        404:
          description: "Not found"
    post:
      tags:
        - "mayor"
      summary: "Create new mayor"
      description: ""
      operationId: "createMayor"
      consumes:
      - "application/json"
      produces:

      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Mayor object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Mayor"
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Mayor"
        400:
          description: "Invalid ID supplied"
  /mayors/{mayorId}:
    get:
      tags:
      - "mayor"
      summary: "Find mayor by ID"
      description: "Returns a single mayor"
      operationId: "getMayorById"
      produces:

      - "application/json"
      parameters:
      - name: "mayorId"
        in: "path"
        description: "ID of mayor to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Mayor"
        404:
          description: "Mayor not found"
    put:
      tags:
      - "mayor"
      summary: "Updates existsing mayor"
      description: ""
      operationId: "updateMayor"
      consumes:
      - "application/json"
      produces:

      - "application/json"
      parameters:
      - name: "mayorId"
        in: "path"
        description: "ID of mayor that needs to be update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Mayor object that needs to be update"
        required: true
        schema:
          $ref: "#/definitions/Mayor"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Mayor/properties/id"
        409:
          description: "Invalid input"
    delete:
      tags:
      - "mayor"
      summary: "Deletes a mayor"
      description: ""
      operationId: "deleteMayor"
      produces:

      - "application/json"
      parameters:
      - name: "mayorId"
        in: "path"
        description: "Mayor id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
       204:
          description: "successful operation"
       404:
          description: "Mayor not found"

  /attributes:
    get:
      tags:
      - "attribute"
      summary: "Get all attributes"
      operationId: "getAllattributes"
      produces:

      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Attribute"
        404:
          description: "Not found"
    post:
      tags:
        - "attribute"
      summary: "Create new attribute"
      description: ""
      operationId: "createAttribute"
      consumes:
      - "application/json"
      produces:

      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Attribute object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Attribute"
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Attribute"
        400:
          description: "Invalid ID supplied"
  /attributes/{attributeId}:
    get:
      tags:
      - "attribute"
      summary: "Find attribute by ID"
      description: "Returns a single attribute"
      operationId: "getAttributeById"
      produces:

      - "application/json"
      parameters:
      - name: "attributeId"
        in: "path"
        description: "ID of attribute to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Attribute"
        404:
          description: "Attribute not found"
    put:
      tags:
      - "attribute"
      summary: "Updates existsing attribute"
      description: ""
      operationId: "updateAttribute"
      consumes:
      - "application/json"
      produces:

      - "application/json"
      parameters:
      - name: "attributeId"
        in: "path"
        description: "ID of attribute that needs to be update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Attribute object that needs to be update"
        required: true
        schema:
          $ref: "#/definitions/Attribute"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Attribute/properties/id"
        409:
          description: "Invalid input"
    delete:
      tags:
      - "attribute"
      summary: "Deletes a attribute"
      description: ""
      operationId: "deleteAttribute"
      produces:
      - "application/json"
      parameters:
      - name: "attributeId"
        in: "path"
        description: "Attribute id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
       204:
          description: "successful operation"
       404:
          description: "Attribute not found"

  /attributetypes:
    get:
      tags:
      - "attributetype"
      summary: "Get all attribute types"
      operationId: "getAllattributetypes"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AttributeType"
        404:
          description: "Not found"
    post:
      tags:
        - "attributetype"
      summary: "Create new attribute type"
      description: ""
      operationId: "createAttributeType"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "AttributeType object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/AttributeType"
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AttributeType"
        400:
          description: "Invalid ID supplied"
  /attributetypes/{attributeId}:
    get:
      tags:
      - "attributetype"
      summary: "Find attributetype by ID"
      description: "Returns a single attribute type"
      operationId: "getAttributeTypeById"
      produces:
      - "application/json"
      parameters:
      - name: "attributeId"
        in: "path"
        description: "ID of attribute type to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AttributeType"
        404:
          description: "AttributeType not found"
    put:
      tags:
      - "attributetype"
      summary: "Updates existsing attribute type"
      description: ""
      operationId: "updateAttributeType"
      consumes:
      - "application/json"
      produces:

      - "application/json"
      parameters:
      - name: "attributeId"
        in: "path"
        description: "ID of attributetype that needs to be update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "AttributeType object that needs to be update"
        required: true
        schema:
          $ref: "#/definitions/AttributeType"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AttributeType/properties/id"
        409:
          description: "Invalid input"
    delete:
      tags:
      - "attributetype"
      summary: "Deletes a attribute type"
      description: ""
      operationId: "deleteAttributeType"
      produces:

      - "application/json"
      parameters:
      - name: "attributeId"
        in: "path"
        description: "AttributeType id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
       204:
          description: "successful operation"
       404:
          description: "AttributeType not found"

definitions:
  Country:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Country"
  Region:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      countryId:
        $ref: '#/definitions/Country/properties/id'
    xml:
      name: "Region"
  City:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      regionId:
        $ref: "#/definitions/Region/properties/id"
      name:
        type: "string"
        example: "Moscow"
      mayorId:
        $ref: "#/definitions/Mayor/properties/id"
      attributies:
        type: "array"
        xml:
          name: "attributies"
          wrapped: true
        items:
          $ref: '#/definitions/Attribute/properties/id'
    xml:
      name: "City"
  Mayor:
    type: "object"
    required:
    - "cityId"
    - "mayor"
    properties:
      id:
        type: "integer"
        format: "int64"
      cityId:
        $ref: "#/definitions/City/properties/id"
      mayor:
        type: "string"
        example: "Sergeev Sergei Ivanovich"
    xml:
      name: "Mayor"
  Attribute:
    type: "object"
    required:
    - "name"
    - "value"
    - "typeId"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      value:
        type: "string"
      typeId:
          $ref: '#/definitions/AttributeType/properties/id'
    xml:
      name: "Attribute"
  AttributeType:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "AttributeType"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"